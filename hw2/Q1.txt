####################################################################
val_test01
####################################################################

Output:
==8072== Memcheck, a memory error detector
==8072== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8072== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8072== Command: ./a.out
==8072== 

TEST01
  C++ version.
  A sample code for analysis by VALGRIND.
  0  1
  1  1
  2  2
  3  3
  4  5
  5  8
  6  13
  7  21
  8  34
  9  55
==8072== Invalid write of size 4
==8072==    at 0x108AB2: f(int) (val_test01_solved.cpp:82)
==8072==    by 0x10893E: main (val_test01_solved.cpp:40)
==8072==  Address 0x5b7e0e8 is 0 bytes after a block of size 40 alloc'd
==8072==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==8072==    by 0x10899A: f(int) (val_test01_solved.cpp:72)
==8072==    by 0x10893E: main (val_test01_solved.cpp:40)
==8072== 
==8072== Invalid read of size 4
==8072==    at 0x108AFD: f(int) (val_test01_solved.cpp:83)
==8072==    by 0x10893E: main (val_test01_solved.cpp:40)
==8072==  Address 0x5b7e0e8 is 0 bytes after a block of size 40 alloc'd
==8072==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==8072==    by 0x10899A: f(int) (val_test01_solved.cpp:72)
==8072==    by 0x10893E: main (val_test01_solved.cpp:40)
==8072== 
  10  89
==8072== Mismatched free() / delete / delete []
==8072==    at 0x4C3173B: operator delete[](void*) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==8072==    by 0x108B33: f(int) (val_test01_solved.cpp:86)
==8072==    by 0x10893E: main (val_test01_solved.cpp:40)
==8072==  Address 0x5b7e0c0 is 0 bytes inside a block of size 40 alloc'd
==8072==    at 0x4C2FB0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==8072==    by 0x10899A: f(int) (val_test01_solved.cpp:72)
==8072==    by 0x10893E: main (val_test01_solved.cpp:40)
==8072==

It shows illegal read and write operations at line 83 and 82 respectively. Also, it complains at the delete operation. Clearly, the program is operating on the position after the end of the allocated block.
Given the purpose of the code (N+1 entries), keep the loop the same and simply allocate memory for one more element. 

####################################################################
val_test02
####################################################################

Output:
==18153== Memcheck, a memory error detector
==18153== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==18153== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==18153== Command: ./a.out
==18153== 

TEST02:
  C++ version
  A sample code for analysis by VALGRIND.
  0  0
  1  2
==18153== Conditional jump or move depends on uninitialised value(s)
==18153==    at 0x4F43B2A: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==18153==    by 0x4F50074: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==18153==    by 0x108A75: junk_data() (val_test02_solved.cpp:104)
==18153==    by 0x10892E: main (val_test02_solved.cpp:37)
==18153== 
==18153== Use of uninitialised value of size 8
==18153==    at 0x4F4362E: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==18153==    by 0x4F43B53: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==18153==    by 0x4F50074: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==18153==    by 0x108A75: junk_data() (val_test02_solved.cpp:104)
==18153==    by 0x10892E: main (val_test02_solved.cpp:37)
==18153== 
==18153== Conditional jump or move depends on uninitialised value(s)
==18153==    at 0x4F4363B: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==18153==    by 0x4F43B53: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==18153==    by 0x4F50074: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==18153==    by 0x108A75: junk_data() (val_test02_solved.cpp:104)
==18153==    by 0x10892E: main (val_test02_solved.cpp:37)
==18153== 
==18153== Conditional jump or move depends on uninitialised value(s)
==18153==    at 0x4F43B86: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==18153==    by 0x4F50074: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==18153==    by 0x108A75: junk_data() (val_test02_solved.cpp:104)
==18153==    by 0x10892E: main (val_test02_solved.cpp:37)
==18153== 
  2  0
  3  6
  4  8
  5  0
  6  0
  7  0
  8  0
  9  0

TEST02
  Normal end of execution.
==18153== 
==18153== HEAP SUMMARY:
==18153==     in use at exit: 0 bytes in 0 blocks
==18153==   total heap usage: 3 allocs, 3 frees, 73,768 bytes allocated
==18153== 
==18153== All heap blocks were freed -- no leaks are possible
==18153== 
==18153== For counts of detected and suppressed errors, rerun with: -v
==18153== Use --track-origins=yes to see where uninitialised values come from
==18153== ERROR SUMMARY: 24 errors from 4 contexts (suppressed: 0 from 0)

It is interesting that valgrind starts complaining at printing (Line 104) while not at modifications of the array x[].
The solution is simply extend the loop and initialize all positions. 